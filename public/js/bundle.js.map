{
  "version": 3,
  "sources": ["mapbox.js", "alerts.js", "login.js", "updateSettings.js", "stripe.js", "index.js"],
  "sourcesContent": ["\r\nexport const displayMap = (locations) => {\r\n    mapboxgl.accessToken = 'pk.eyJ1IjoidmljdG9ybXJmOCIsImEiOiJjbTRkcnBiNWgwMzBzMmtwejA5b2owOWdyIn0.zLL2t5utzZJzlOTcfNuL8Q';\r\n    \r\n    var map = new mapboxgl.Map({\r\n        container: 'map',\r\n        style: 'mapbox://styles/mapbox/light-v10',\r\n        scrollZoom: false\r\n    });\r\n\r\n    const bounds = new mapboxgl.LngLatBounds();\r\n\r\n    locations.forEach(loc => {\r\n        // Create marker\r\n        const el = document.createElement('div');\r\n        el.className = 'marker';\r\n\r\n        // Add marker\r\n        new mapboxgl.Marker({\r\n            element: el,\r\n            anchor: 'bottom'\r\n        })\r\n            .setLngLat(loc.coordinates)\r\n            .addTo(map);\r\n\r\n        // Add popup\r\n        new mapboxgl.Popup({\r\n            offset: 30\r\n        })\r\n            .setLngLat(loc.coordinates)\r\n            .setHTML(`<p>Day ${loc.day}: ${loc.description}</p>`)\r\n            .addTo(map);\r\n\r\n        // Extends map bounds to include current location\r\n        bounds.extend(loc.coordinates);\r\n    }); \r\n\r\n    map.fitBounds(bounds, {\r\n        padding: {\r\n            top: 200,\r\n            bottom: 150,\r\n            left: 100,\r\n            right: 100\r\n        }\r\n    });\r\n}\r\n\r\n", "export const hideAlert = () => {\r\n    const el = document.querySelector('.alert');\r\n    if (el) el.parentElement.removeChild(el);\r\n  };\r\n  \r\n// type is 'success' or 'error'\r\nexport const showAlert = (type, msg) => {\r\n    hideAlert();\r\n    const markup = `<div class=\"alert alert--${type}\">${msg}</div>`;\r\n    document.querySelector('body').insertAdjacentHTML('afterbegin', markup);\r\n    window.setTimeout(hideAlert, 5000);\r\n};\r\n  ", "import { showAlert } from './alerts';\r\n\r\nexport const login = async (email, password) => {\r\n    try{\r\n        const res = await axios({\r\n            method: 'POST',\r\n            url: '/api/v1/users/login',\r\n            data: {\r\n                email,\r\n                password\r\n            }\r\n        });\r\n\r\n        if(res.data.status === 'success'){\r\n            showAlert('success', 'Logged in successfully');\r\n            window.setTimeout(() => {\r\n                location.assign('/');\r\n            }, 1500);\r\n        }\r\n    } catch(err) {\r\n        showAlert('error', err.response.data.message)\r\n    }\r\n}\r\n\r\nexport const logout = async () => {\r\n    try{\r\n        const res = await axios({\r\n            method: 'GET',\r\n            url:'/api/v1/users/logout',\r\n        });\r\n\r\n        if(res.data.status === 'success'){\r\n            location.reload(true);\r\n        }\r\n    } catch(err) {\r\n        showAlert('error', 'Error logging out! Try again');\r\n    }\r\n}", "import { showAlert } from './alerts';\r\n\r\n// type is either data or password\r\nexport const updateSettings = async (data, type) => {\r\n    try{\r\n        const url = \r\n            type === 'password' \r\n                ? '/api/v1/users/updateMyPassword' \r\n                : '/api/v1/users/updateMe';\r\n\r\n        const res = await axios({\r\n            method: 'PATCH',\r\n            url,\r\n            data\r\n        });\r\n\r\n        if(res.data.status === 'success'){\r\n            showAlert('success', `${type.toUpperCase()} updated successfully!` );\r\n        }\r\n    } catch(err){\r\n        showAlert('error', err.response.data.message)\r\n    }\r\n}", "import { showAlert } from './alerts';\r\n\r\nexport const bookTour = async tourId => {\r\n    try{\r\n        const stripe = Stripe('pk_test_51QSuWUDuHI9lwyv3UCS5WnJTos77QaKSKTqOv3j97NzvU579iHtfTa2DuZG8AJfO6U3dLrl2XyAIp9Td9UgRtNu600Wy2g29BL');\r\n        // 1) Get the session from the server to the client side from API\r\n        const session = await axios(`/api/v1/bookings/checkout-session/${tourId}`);\r\n        // 2) Use the stripe object to create checkout form + charge the credit card\r\n        await stripe.redirectToCheckout({\r\n            sessionId: session.data.session.id\r\n        });\r\n    } catch(err){\r\n        console.log(err);\r\n        showAlert('error', err);\r\n    }\r\n};", "import { displayMap } from './mapbox';\r\nimport { login, logout } from './login';\r\nimport { updateSettings } from './updateSettings';\r\nimport { bookTour } from './stripe';\r\n\r\n// DOM ELEMENTS\r\nconst mapBox = document.getElementById('map');\r\nconst loginForm = document.querySelector('.form--login');\r\nconst logOutBtn = document.querySelector('.nav__el--logout');\r\nconst userDataForm = document.querySelector('.form-user-data');\r\nconst userPasswordForm = document.querySelector('.form-user-password');\r\nconst bookBtn = document.getElementById('book-tour');\r\n\r\n\r\n// DELEGATION\r\nif(mapBox){\r\n    const locations = JSON.parse(mapBox.dataset.locations);\r\n    displayMap(locations);\r\n}\r\n\r\nif(loginForm){\r\n    loginForm.addEventListener('submit', e => {\r\n        e.preventDefault(); // prevents the form from loading any other page\\\r\n        const email = document.getElementById('email').value;\r\n        const password = document.getElementById('password').value;\r\n        login(email, password);\r\n    });\r\n}\r\n\r\nif(logOutBtn){\r\n    logOutBtn.addEventListener('click', logout);\r\n}\r\n\r\nif(userDataForm){\r\n    userDataForm.addEventListener('submit', e => {\r\n        e.preventDefault();\r\n        const form = new FormData();\r\n        form.append('name', document.getElementById('name').value);\r\n        form.append('email', document.getElementById('email').value);\r\n        form.append('photo', document.getElementById('photo').files[0]);\r\n\r\n        updateSettings(form, 'data');\r\n    }); \r\n}\r\n\r\nif(userPasswordForm){\r\n    userPasswordForm.addEventListener('submit', async e => {\r\n        e.preventDefault();\r\n        document.querySelector('.btn--save-password').textContent = 'Updating...';\r\n\r\n        const passwordCurrent = document.getElementById('password-current').value;\r\n        const password = document.getElementById('password').value;\r\n        const passwordConfirm = document.getElementById('password-confirm').value;\r\n        await updateSettings({ passwordCurrent, password, passwordConfirm }, 'password');\r\n\r\n        document.querySelector('.btn--save-password').textContent = 'Save password';\r\n        document.getElementById('password-current').value = '';\r\n        document.getElementById('password').value = '';\r\n        document.getElementById('password-confirm').value = '';\r\n    }); \r\n}\r\n\r\nif(bookBtn){\r\n    bookBtn.addEventListener('click', e => {\r\n        e.target.textContent = 'Processing...';\r\n        const { tourId } = e.target.dataset; // e.target is the event that was clicked and triggers the event listener\r\n        bookTour(tourId);\r\n    })\r\n}"],
  "mappings": "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",
  "names": ["displayMap", "locations", "map", "bounds", "loc", "el", "hideAlert", "el", "showAlert", "type", "msg", "markup", "login", "email", "password", "showAlert", "err", "logout", "updateSettings", "data", "type", "url", "showAlert", "err", "bookTour", "tourId", "stripe", "session", "err", "showAlert", "mapBox", "loginForm", "logOutBtn", "userDataForm", "userPasswordForm", "bookBtn", "locations", "displayMap", "email", "password", "login", "logout", "form", "updateSettings", "passwordCurrent", "passwordConfirm", "tourId", "bookTour"]
}
